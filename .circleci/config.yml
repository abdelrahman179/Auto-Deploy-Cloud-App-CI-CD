version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy front-end and back-end cloudformation stacks
    steps:
      - run:
          name: Destroy frontend
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name front-prod-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Destroy backend
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name back-prod-${CIRCLE_WORKFLOW_ID:0:7}


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            success_migration=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if((${success_migration}==1));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend && npm i && npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend && npm i && npm run build
             # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend && npm i && npm run test
      - slack/notify:
          channel: '#general'
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: fail

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend && npm i && npm run test
      - slack/notify:
          channel: '#general'
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: fail

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend && npm i && npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend && npm i && npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar
            yum -y install gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name back-prod-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udacity-project
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name front-prod-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udacity-project
      - run:
          name: Get and save public DNS of EC2 instance to https://memstash.io/
          command: |
             cd .circleci/ansible
             URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID})
             echo "$URL" >> inventory.txt
             cat inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      - destroy-environment
      # - revert-migrations

#   configure-infrastructure:
#     docker:
#       - image: python:3.7-alpine3.11
#     steps:
#       - checkout
#       - add_ssh_keys:
#           fingerprints: ["1d:4f:86:f3:52:8b:ba:cd:fc:bb:01:79:3b:03:2b:f5"]#["18:51:fc:17:a2:fa:63:8e:a7:6f:43:fc:33:cb:95:7c"] # You can get this ID in the section where you registered the SSH Key
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Install dependencies
#           command: |
#             apk add gzip curl
#             apk add --update ansible
#             apk add tar
#             apk add gzip
#             pip install awscli
#       - run:
#           name: Configure server
#           command: |
#             echo ENVIRONMENT=production >> ".env"
#             echo NODE_ENV=production >> ".env"
#             echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
#             echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
#             echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
#             echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
#             echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
#             echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
#             echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
#             echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
#             echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
#             cd .circleci/ansible
#             URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID})
#             echo "$URL"
#             echo "$URL" >> inventory.txt
#             cat inventory.txt
#             ansible-playbook -i inventory.txt configure-server.yml

#   run-migrations:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - run:
#           name: Run migrations
#           command: |
#             cd backend && npm i
#             echo ENVIRONMENT=production >> ".env"
#             echo NODE_ENV=production >> ".env"
#             echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
#             echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
#             echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
#             echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
#             echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
#             echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
#             echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
#             echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
#             echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
#             touch migrations.txt
#             npm run migrations >> migration.txt
#             cat migrations.txt
#           no_output_timeout: 30m
#       - run:
#           name: Send migration results to memstash
#           command: |
#             cd backend
#             if grep -q "has been executed successfully." migrations.txt
#             then
#               curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
#             else
#               echo $(curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
#             fi
#       - revert-migrations
#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID}

#   deploy-frontend:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
#             yum -y install nodejs
#             yum -y install tar gzip
#       - run:
#           name: Get backend url
#           command: |
#             BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID})
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#             cd frontend
#             npm update
#             npm run build
#       - run:
#           name: Deploy frontend objects
#           command: |
#             aws s3 cp ./frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
#       - revert-migrations
#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID}

#   deploy-backend:
#     docker:
#       - image: python:3.7-alpine3.11
#     steps:
#       - checkout
#       - add_ssh_keys:
#           fingerprints: ["1d:4f:86:f3:52:8b:ba:cd:fc:bb:01:79:3b:03:2b:f5"]
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Install dependencies
#           command: |
#             apk add gzip curl
#             apk add --update tar gzip ansible nodejs npm
#             pip install awscli
#       - run:
#           name: Deploy backend
#           no_output_timeout: 30m
#           command: |
#             tar -C backend -czvf artifact.tar.gz .
#             echo ENVIRONMENT=production >> ".env"
#             echo NODE_ENV=production >> ".env"
#             echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
#             echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
#             echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
#             echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
#             echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
#             echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
#             echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
#             echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
#             echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
#             cd .circleci/ansible
#             URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID})
#             echo "$URL"
#             echo "$URL" >> inventory.txt
#             cat inventory.txt
#             ansible-playbook -i inventory.txt deploy-backend.yml
#       - revert-migrations
#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID}

#   smoke-test:
#     docker:
#       - image: python:3.7-alpine3.11
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update curl
#             pip3 install awscli
#       - run:
#           name: Get backend url
#           command: |
#             BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID})
#       - run:
#           name: Backend smoke test.
#           command: |
#             export API_URL="http://${BACKEND_IP}:3030/api/status"
#       - run:
#           name: Frontend smoke test.
#           command: |
#             URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com"
#             if curl -s ${URL} | grep "Welcome"
#             then
#               return 1
#             else
#               return 0
#             fi
#       - revert-migrations
#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID}

#   cloudfront-update:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
#             yum -y install nodejs
#             yum -y install tar gzip
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             aws cloudformation deploy --template-file .circleci/files/cloudfront.yml --tags project=udapeopleCloudFront --stack-name udaPeopleCloudFront --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID}
#             curl -H "Content-Type: text/plain" -H "token: cloudfront" --request PUT --data "${CIRCLE_WORKFLOW_ID}" https://api.memstash.io/values/workflow_${CIRCLE_WORKFLOW_ID}
#       - revert-migrations
#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID}

#   cleanup:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Get old stack workflow id
#           command: |
#             prevWorkflowID=$(curl -H "token: cloudfront" --request GET https://api.memstash.io/values/workflow_${CIRCLE_WORKFLOW_ID})
# #            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [ ! -z prevWorkflowID ]
#             then
#               prevWorkflowID=$(curl -H "token: cloudfront" --request GET https://api.memstash.io/values/workflow_${CIRCLE_WORKFLOW_ID})
#               echo the old ID is ${prevWorkflowID}
#               aws s3 rm s3://udapeople-${prevWorkflowID} --recursive
#               echo S3 buckets are removed
#               aws cloudformation delete-stack --stack-name udaPeopleFront-${prevWorkflowID}
#               aws cloudformation delete-stack --stack-name udaPeopleBack-${prevWorkflowID}
#             fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]

