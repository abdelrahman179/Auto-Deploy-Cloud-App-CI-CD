version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy front-end and back-end cloudformation stacks
    steps:
      - run:
          name: Destroy frontend
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name front-prod-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Destroy backend
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name back-prod-${CIRCLE_WORKFLOW_ID:0:7}


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations 
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/QDkyZrKeDHx9SEPK7ZJqjt/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if((${SUCCESS}==1));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend && npm i && npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend && npm i && npm run build
            # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend && npm i && npm run test
      - slack/notify:
          channel: '#general'
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: fail

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend && npm i && npm run test
      - slack/notify:
          channel: '#general'
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: fail

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend && npm i && npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend && npm i && npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar
            yum -y install gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name back-prod-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udacity-project
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name front-prod-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udacity-project
      - run:
          name: Get and save public DNS of EC2 instance to https://memstash.io/
          command: |
            cd .circleci/ansible
            IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo ${IP} >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      - destroy-environment


  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["11:31:c7:e6:de:32:23:14:d1:15:3a:a5:1e:62:b2:21"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl openssh-client
            pip install awscli
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
    - image: circleci/node:13.8.0
      user: root
      environment:
        VERSION: "1"
        TYPEORM_CONNECTION: $TYPEORM_CONNECTION
        TYPEORM_HOST: $TYPEORM_HOST
        TYPEORM_USERNAME: $TYPEORM_USERNAME
        TYPEORM_PASSWORD: $TYPEORM_PASSWORD
        TYPEORM_DATABASE: $TYPEORM_DATABASE
        TYPEORM_PORT: $TYPEORM_PORT
        TYPEORM_ENTITIES: $TYPEORM_ENTITIES
        ANSIBLE_HOST_KEY_CHECKING: False
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apt-get update -y 
            apt upgrade -y
            apt install tar gzip -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: enviroment variables
          command:  |
              cd backend
              echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> .env
              echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> .env
              echo "TYPEORM_HOST=${TYPEORM_HOST}" >> .env
              echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
              echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
              echo "TYPEORM_PASSWORD=password" >> .env
              echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
              echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> .env
              echo "TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}" >> .env
              cat .env
              echo $TYPEORM_MIGRATIONS_DIR
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            echo "migration file"
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            echo "CIRCLE_WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}"
            cd backend
            if grep -q "has been executed successfully."  migrations_dump.txt
            then
              echo "CIRCLE_WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}"
              echo "Database migration was successful"
              curl https://kvdb.io/QDkyZrKeDHx9SEPK7ZJqjt/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "Database migration was failed"
              curl https://kvdb.io/QDkyZrKeDHx9SEPK7ZJqjt/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
      - revert-migrations
      - destroy-environment

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
        user: root
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt -y install awscli
      - run:
          name: Set env variables
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            echo ENVIRONMENT=production  >> frontend/.env
            echo NODE_ENV=production >> frontend/.env
            cat frontend/.env
      - run:
          name: Build frontend objects
          command: |
            cd frontend
            npm i
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
      - revert-migrations
      - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["11:31:c7:e6:de:32:23:14:d1:15:3a:a5:1e:62:b2:21"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add gzip curl
            apk add --update tar gzip ansible nodejs npm
            pip install awscli
      - run: 
          name: install node modules
          command: | 
            cd backend
            npm i
            npm run build
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |           
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "$IP"
            echo "$IP" >> inventory.txt
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip3 install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            BACKEND_URL="http://${BACKEND_IP}:3030/api/status"
            echo "Backend url: ${BACKEND_URL}"
            curl -s ${BACKEND_URL} | grep "\"status\":\"ok\""
            if [$(api_status) = "ok"]
            then
              echo "Frontend Smoke Test Success"
              return 1
            else
              echo "Backend Smoke Test Failed"
              return 0
            fi
          # command: |
          #   export IP=$(aws ec2 describe-instances \
          #     --query 'Reservations[*].Instances[*].PublicIpAddress' \
          #     --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
          #     --output text)
          #   echo BACKEND_IP: http://${IP}:3030/api/status
          #   if curl -s http://${IP}:3030/api/status | grep "ok"
          #   then
          #     echo "Backend Smoke Test Success"
          #     exit 0
          #   else
          #     echo "Backend Smoke Test Failed"
          #     exit 1
          #   fi
      - run:
          name: Frontend smoke test.
          command: |
            echo http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/
            if curl -s http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/ | grep "Welcome"
            then
              echo "Frontend Smoke Test Success"
              return 0
            else
              echo "Frontend Smoke Test Failed"BACKEND_IP
      - destroy-environment

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation update-stack \
              --use-previous-template \
              --stack-name udapeople-cloudfront \
              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7},UsePreviousValue=false
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id and Remove old stacks and files
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo Stack names: "${STACKS[@]}"
            # Remove old stacks and files
            echo THIS IS THE OldWorkflowID: "${OldWorkflowID}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rb s3://udapeople-${OldWorkflowID} --force
              aws cloudformation delete-stack --stack-name front-prod-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name back-prod-${OldWorkflowID}
            fi
      - destroy-environment
      - revert-migrations

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]

