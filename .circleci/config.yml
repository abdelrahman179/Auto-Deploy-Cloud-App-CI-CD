version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy front-end and back-end cloudformation stacks
    steps:
      - run:
          name: Destroy frontend
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name front-prod-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Destroy backend
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name back-prod-${CIRCLE_WORKFLOW_ID:0:7}


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations 
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/KSDSGaPD1H6RMpwutXznUC/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if((${SUCCESS}==1));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - attach_workspace:
          at: .
      - run:
          name: Build front-end
          command: |
            cd frontend && npm i && npm run build
            # exit 1
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules
            - frontend/dist
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend && npm i && npm run build
            # exit 1
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules
            - backend/dist
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      
      # - slack/notify:
      #     channel: '#udacity'
      #     event: fail
      #     custom: |
      #       {
      #         "blocks": [
      #           {
      #             "type": "section",
      #             "text": {
      #           	  "type": "mrkdwn",
      #               "text": "*Job Failed!* :red_circle:\n>*Job:* $CIRCLE_JOB \n>*Link:* $CIRCLE_BUILD_URL \n\n>*Project:* $CIRCLE_PROJECT_REPONAME \n>*Branch:* $CIRCLE_BRANCH \n>*Author:* $CIRCLE_USERNAME"
      #             }
      #           }
      #         ]
      #       }


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend && npm i && npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend && npm i && npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test


  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend && npm i && npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend && npm i && npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar
            yum -y install gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name back-prod-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udacity-project
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name front-prod-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udacity-project
      - run:
          name: Add backend ip to ansible inventory
          command: |
            echo "[web]" > ./.circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment


  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["11:31:c7:e6:de:32:23:14:d1:15:3a:a5:1e:62:b2:21"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl openssh-client
            pip install awscli
      - run:
          name: Configure server
          no_output_timeout: 60m
          command: |
            echo ENVIROMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd .circleci/ansible
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
    - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y less tar gzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migration
          command:  |
              cd backend
              echo ENVIROMENT=$ENVIROMENT > ".env"
              echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
              echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
              echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
              echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
              echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
              cat .env
              npm i
              npm run migrations > migration_status.txt
              echo "migration file ...."
              cat migration_status.txt
      - run:
          name: Send migration results to kvdb
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully"  migration_status.txt
            then
              echo "CIRCLE_WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}"
              echo "Database migration was successful"
              curl --insecure https://kvdb.io/KSDSGaPD1H6RMpwutXznUC/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "Database migration was failed"
              curl --insecure https://kvdb.io/KSDSGaPD1H6RMpwutXznUC/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
      - revert-migrations
      - destroy-environment

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
        user: root
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt -y install awscli
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
      - run:
          name: Build frontend objects
          working_directory: ./frontend
          command: |
            npm i
            npm run build
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      - revert-migrations
      - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["11:31:c7:e6:de:32:23:14:d1:15:3a:a5:1e:62:b2:21"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add gzip curl openssh-client
            apk add --update tar gzip openssh rsync ansible npm nodejs 
            pip install awscli
      - run:
          name: check  existance of dist
          working_directory: .
          command: |
            cd backend
            pwd
            ls -la
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
              cat inventory.txt
              export ANSIBLE_HOST_KEY_CHECKING=False
              ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip3 install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo ${BACKEND_IP}
            if curl -s http://${BACKEND_IP}:3030/api/status | grep "ok"
            then
              echo "Backend Smoke Test Success"
              return 0
            else
              echo "Backend Smoke Test Failed"
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              echo "Frontend Smoke Test Success"
              return 0
            else
              echo "Frontend Smoke Test Failed"
              return 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
            curl -o node-v13.14.0-linux-x64.tar.gz https://nodejs.org/dist/latest-v13.x/node-v13.14.0-linux-x64.tar.gz
            tar --strip-components 1 -xzvf node-v* -C /usr/local
      - run:
          name: Update cloudfront distribution
          working_directory: ./.cricleci/files/
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo $OldWorkflowID >> OldWorkflowID.txt
            cat OldWorkflowID.txt
            echo "--------------"
            echo Old Workflow ID: "${OldWorkflowID}"
            echo Current Workflow ID: "${CIRCLE_WORKFLOW_ID:0:7}"

            if [ -n "${OldWorkflowID}" ]
            then
              echo "Updating existing CloudFront stack..."
              aws cloudformation update-stack \
                --template-body file://cloudfront.yml \
                --stack-name InitialStack \
                --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}
              echo "Workflow ID saved ... "
            else
              echo "Creating new CloudFront sack..."
              aws cloudformation create-stack \
                --template-body file://cloudfront.yml \
                --stack-name cloudfront-udapeople \
                --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/files/OldWorkflowID.txt
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Fetch old stack workflow ID
          working_directory: ./.cricleci/files/
          command: |
            # Fetch the Old workflow ID
            # export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            # echo Old Workflow ID: "${OldWorkflowID}"

            cat OldWorkflowID.txt
            OldWokflowID=$(cat OldWorkflowID.txt)
            echo Old Workflow ID: "${OldWokflowID}"

            export CURRENT_CIRCLE_WORKFLOW_ID=${CIRCLE_WORKFLOW_ID:0:7}
            echo Current Workflow ID: "${CURRENT_CIRCLE_WORKFLOW_ID}"

            # Fetch the stack names
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo Stack names: "${STACKS[@]}"
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              echo " ----------- Delete Confirmed ----------- "
              aws s3 rm "s3://${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "front-prod-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "back-prod-${OldWorkflowID}"
            fi
      - destroy-environment
      - revert-migrations

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
